ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
}
obs.list[[i]]=res
}
View(obs.list)
View(obs.list)
obs.list[[1]]
obs.list<- vector("list", n)
names(obs.list)<- id
length(dat.list)
ntseg=max(dat.list[[i]]$time.seg)
i=1
j=1
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc)
#calculate # of obs in each grid.cell by time.seg
for (i in 1:length(dat.list)) {
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
obs.list[[i]]=res
}
}
obs.list[[1]]
colSums(obs.list[[1]])
rowSums(obs.list[[1]])
#------------------------------------------------
get.summary.stats_obs=function(dat){  #dat must have time.seg assigned; for all IDs
#change values of grid cells for easy manipulation
dat$grid.cell<- as.factor(dat$grid.cell)
levels(dat$grid.cell)<- 1:length(levels(dat$grid.cell))
dat$grid.cell<- as.numeric(dat$grid.cell)
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id)
n=length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each grid.cell by time.seg
for (i in 1:length(dat.list)) {
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
obs.list[[i]]=res
}
}
obs<- data.frame(matrix(unlist(obs.list)))
obs
}
#load data
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
foo<- get.summary.stats_obs(dat)
View(foo)
foo<- data.frame(matrix(unlist(obs.list), nrow=length(obs.list), byrow=T))
foo<- unlist(obs.list)
foo<- data.frame(t(sapply(obs.list,c)))
foo<- do.call(rbind.data.frame, obs.list)
View(foo)
i=1
id<- rep(unique(dat.list[[i]]$id), ntseg)
ntseg=max(dat.list[[i]]$time.seg)
id<- rep(unique(dat.list[[i]]$id), ntseg)
#------------------------------------------------
get.summary.stats_obs=function(dat){  #dat must have time.seg assigned; for all IDs
#change values of grid cells for easy manipulation
dat$grid.cell<- as.factor(dat$grid.cell)
levels(dat$grid.cell)<- 1:length(levels(dat$grid.cell))
dat$grid.cell<- as.numeric(dat$grid.cell)
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id)
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each grid.cell by time.seg
for (i in 1:length(dat.list)) {
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc+1)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
}
id<- rep(unique(dat.list[[i]]$id), ntseg)
res=cbind(id, res)
obs.list[[i]]=res
}
obs<- do.call(rbind.data.frame, obs.list)
obs
}
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id)
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each grid.cell by time.seg
for (i in 1:length(dat.list)) {
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc+1)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
}
id<- rep(unique(dat.list[[i]]$id), ntseg)
res=cbind(id, res)
obs.list[[i]]=res
}
#------------------------------------------------
get.summary.stats_obs=function(dat){  #dat must have time.seg assigned; for all IDs
#change values of grid cells for easy manipulation
dat$grid.cell<- as.factor(dat$grid.cell)
levels(dat$grid.cell)<- 1:length(levels(dat$grid.cell))
dat$grid.cell<- as.numeric(dat$grid.cell)
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id)
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each grid.cell by time.seg
for (i in 1:length(dat.list)) {
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc+1)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
id<- rep(unique(dat.list[[i]]$id), ntseg)
res=cbind(id, res)
obs.list[[i]]=res
}
}
obs<- do.call(rbind.data.frame, obs.list)
obs
}
foo<- get.summary.stats_obs(dat)
#------------------------------------------------
get.summary.stats_obs=function(dat){  #dat must have time.seg assigned; for all IDs
#change values of grid cells for easy manipulation
dat$grid.cell<- as.factor(dat$grid.cell)
levels(dat$grid.cell)<- 1:length(levels(dat$grid.cell))
dat$grid.cell<- as.numeric(dat$grid.cell)
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id)
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each grid.cell by time.seg
for (i in 1:length(dat.list)) {
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc+1)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
}
id<- rep(unique(dat.list[[i]]$id), ntseg)
res=cbind(id, res)
obs.list[[i]]=res
}
obs<- do.call(rbind.data.frame, obs.list)
obs
}
foo<- get.summary.stats_obs(dat)
View(foo)
#------------------------------------------------
get.summary.stats_obs=function(dat){  #dat must have time.seg assigned; for all IDs
#change values of grid cells for easy manipulation
dat$grid.cell<- as.factor(dat$grid.cell)
levels(dat$grid.cell)<- 1:length(levels(dat$grid.cell))
dat$grid.cell<- as.numeric(dat$grid.cell)
#create list of input and to store output
dat.list<- df.to.list(dat = dat)
id<- unique(dat$id)
n<- length(id)
obs.list<- vector("list", n)
names(obs.list)<- id
#calculate # of obs in each grid.cell by time.seg
for (i in 1:length(dat.list)) {
ntseg=max(dat.list[[i]]$time.seg)
nloc=length(unique(dat$grid.cell))
res=matrix(0, ntseg, nloc)
for (j in 1:ntseg){
ind=dat.list[[i]] %>% filter(time.seg==j) %>% group_by(grid.cell) %>% count()
res[j,ind$grid.cell]=ind$n #takes count of each cluster within given time segment
}
id<- rep(unique(dat.list[[i]]$id), ntseg)
res=cbind(id, res)
obs.list[[i]]=res
}
obs<- do.call(rbind.data.frame, obs.list)
obs
}
foo<- get.summary.stats_obs(dat)
View(foo)
rowSums(foo[,-1])
colSums(foo[,-1])
source('helper functions.R')
#dat.list<- df.to.list(dat)
obs<- get.summary.stats_obs(dat)
View(obs)
#Define initial activity centers (obs > 100)
tmp<- which(apply(obs[,-1], 2, sum) > 100)
tmp
source('helper functions.R')
#dat.list<- df.to.list(dat)
obs<- get.summary.stats_obs(dat)
View(obs)
#Define initial activity centers (obs > 100)
tmp<- which(apply(obs[,-1], 2, sum) > 100)
tmp
ac.coord.init<- grid.coord[tmp,-3]
ac.coord.init
ngibbs=1000
nburn=ngibbs/2
n.ac=nrow(ac.coord.init)
gamma1=0.1
#run gibbs sampler
pb <- progress_bar$new(
format = " iteration (:current/:total) [:bar] :percent [Elapsed: :elapsed, Remaining: :eta]",
total = ngibbs, clear = FALSE, width= 100)
res=gibbs.activity.center(dat=obs[,-1], grid.coord=grid.coord[,-3], n.ac=n.ac,
ac.coord.init=ac.coord.init, gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(10)
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
#run gibbs sampler
pb <- progress_bar$new(
format = " iteration (:current/:total) [:bar] :percent [Elapsed: :elapsed, Remaining: :eta]",
total = ngibbs, clear = FALSE, width= 100)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(1)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(progress)
library(rnaturalearth)
library(rnaturalearthdata)
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
obs<- get.summary.stats_obs(dat)
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
tmp<- which(apply(obs[,-1], 2, sum) > 100)
ac.coord.init<- grid.coord[tmp,-3]
ngibbs=1000
nburn=ngibbs/2
n.ac=nrow(ac.coord.init)
gamma1=0.1
#run gibbs sampler
pb <- progress_bar$new(
format = " iteration (:current/:total) [:bar] :percent [Elapsed: :elapsed, Remaining: :eta]",
total = ngibbs, clear = FALSE, width= 100)
res=gibbs.activity.center(dat=obs[,-1], grid.coord=grid.coord[,-3], n.ac=n.ac,
ac.coord.init=ac.coord.init, gamma1=gamma1)
#plot output and look at frequency of AC visitation
plot(res$logl,type='l')
plot(res$phi,type='l')
z=data.frame(z=res$z[ngibbs,], time.seg = 1:nrow(obs1.seg))
res$z[ngibbs,]
z=data.frame(z=res$z[ngibbs,], time.seg = 1:nrow(obs))
table(z$z)
#Load world map data
usa <- ne_states(country = "United States of America", returnclass = "sf")
fl<- usa %>% filter(name == "Florida")
fl<- sf::st_transform(fl, crs = "+init=epsg:32617") #change projection to UTM 17N
View(z)
View(obs)
z=data.frame(z=res$z[ngibbs,], id = obs$id)
View(z)
obs1<- obs %>% filter(id == 1)
obs12<- obs %>% filter(id == 12)
obs19<- obs %>% filter(id == 19)
obs27<- obs %>% filter(id == 27)
obs1<- obs %>% filter(id == 1) %>% mutate(time.seg = 1:nrow(.))
View(obs1)
z
z=data.frame(z=res$z[ngibbs,])
table(z$z)
obs<- cbind(z, obs)
View(obs)
obs1<- obs %>% filter(id == 1) %>% mutate(time.seg = 1:nrow(.))
View(obs1)
obs1<- obs %>% filter(id == 1) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
View(obs1)
View(obs1)
obs12<- obs %>% filter(id == 12) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
obs19<- obs %>% filter(id == 19) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
obs27<- obs %>% filter(id == 27) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
dat1<- dat %>% filter(id == 1) %>% left_join(obs1, by = "time.seg")
View(dat1)
z<- data.frame(ac=res$z[ngibbs,])
table(z$ac)
obs<- cbind(z, obs)
obs1<- obs %>% filter(id == 1) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
obs12<- obs %>% filter(id == 12) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
obs19<- obs %>% filter(id == 19) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
obs27<- obs %>% filter(id == 27) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(z, time.seg)
dat1<- dat %>% filter(id == 1) %>% left_join(obs1, by = "time.seg")
View(dat1)
ac<- data.frame(ac=res$z[ngibbs,])
table(ac$ac)
obs<- cbind(ac, obs)
############################
### Add ACs to dataframe ###
############################
obs1<- obs %>% filter(id == 1) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
obs12<- obs %>% filter(id == 12) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
obs19<- obs %>% filter(id == 19) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
obs27<- obs %>% filter(id == 27) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
View(ac)
obs<- get.summary.stats_obs(dat)
obs<- cbind(ac, obs)
obs1<- obs %>% filter(id == 1) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
obs12<- obs %>% filter(id == 12) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
obs19<- obs %>% filter(id == 19) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
obs27<- obs %>% filter(id == 27) %>% mutate(time.seg = 1:nrow(.)) %>% dplyr::select(ac, time.seg)
dat1<- dat %>% filter(id == 1) %>% left_join(obs1, by = "time.seg")
View(dat1)
dat12<- dat %>% filter(id == 12) %>% left_join(obs12, by = "time.seg")
dat19<- dat %>% filter(id == 19) %>% left_join(obs19, by = "time.seg")
dat27<- dat %>% filter(id == 27) %>% left_join(obs27, by = "time.seg")
View(dat27)
dat<- rbind(dat1, dat12, dat19, dat27)
#Load world map data
usa <- ne_states(country = "United States of America", returnclass = "sf")
fl<- usa %>% filter(name == "Florida")
fl<- sf::st_transform(fl, crs = "+init=epsg:32617") #change projection to UTM 17N
ac.coords<- matrix(NA, length(unique(ac$ac)), 2)
colnames(ac.coords)<- c("x","y")
tmp<- res$coord[ngibbs,]
for (i in 1:length(unique(ac$ac))) {
ac.coords[i,]<- c(tmp[i], tmp[i+n.ac])
}
ac.coords<- data.frame(ac.coords, ac=1:length(unique(z$z)))
View(ac.coords)
ac.coords<- data.frame(ac.coords, ac=1:length(unique(ac$ac)))
ac.coords<- matrix(NA, length(unique(ac$ac)), 2)
colnames(ac.coords)<- c("x","y")
tmp<- res$coord[ngibbs,]
for (i in 1:length(unique(ac$ac))) {
ac.coords[i,]<- c(tmp[i], tmp[i+n.ac])
}
ac.coords<- data.frame(ac.coords, ac=1:length(unique(ac$ac)))
View(ac.coords)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-20000), max(dat$utmlong+20000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_point(data = dat, aes(utmlong, utmlat, color=ac), size=0.5) +
geom_point(data = ac.coords, aes(x, y, color = ac), size = 4, pch = 1, stroke = 1) +
scale_color_viridis_c() +
labs(x = "Easting", y = "Northing") +
theme_bw()
dat %>% filter(id==1) %>% length(unique(ac))
View(dat)
dat %>% filter(id==1) %>% unique(ac)
dat %>% filter(id==1) %>% dplyr::select(ac) %>% unique()
dat %>% filter(id==1) %>% dplyr::select(ac) %>% unique() %>% length()
dat %>% filter(id==1) %>% dplyr::select(ac) %>% unique() %>% nrow()
dat %>% filter(id==12) %>% dplyr::select(ac) %>% unique() %>% nrow()
dat %>% filter(id==19) %>% dplyr::select(ac) %>% unique() %>% nrow()
dat %>% filter(id==27) %>% dplyr::select(ac) %>% unique() %>% nrow()
dat %>% filter(id==27) %>% dplyr::select(ac) %>% table()
dat %>% filter(id==19) %>% dplyr::select(ac) %>% table()
dat %>% filter(id==12) %>% dplyr::select(ac) %>% table()
dat %>% filter(id==1) %>% dplyr::select(ac) %>% table()
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-20000), max(dat$utmlong+20000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_point(data = dat, aes(utmlong, utmlat, color=ac), size=0.5, alpha = 0.6) +
geom_point(data = ac.coords, aes(x, y, color = ac), size = 4, pch = 1, stroke = 1) +
scale_color_viridis_c() +
labs(x = "Easting", y = "Northing") +
theme_bw()
ac.coords
res$coord[ngibbs,]
tmp
round(tmp, 1)
ac.coords<- matrix(NA, length(unique(ac$ac)), 2)
colnames(ac.coords)<- c("x","y")
tmp<- res$coord[ngibbs,]
for (i in 1:length(unique(ac$ac))) {
ac.coords[i,]<- c(round(tmp[i], 1), round(tmp[i+n.ac], 1))
}
ac.coords<- data.frame(ac.coords, ac=1:length(unique(ac$ac)))
ac.coords
View(ac.coords)
round(tmp, 0)
floor(tmp)
round(tmp, 0) - floor(tmp)
ac.coords<- matrix(NA, length(unique(ac$ac)), 2)
colnames(ac.coords)<- c("x","y")
tmp<- res$coord[ngibbs,]
for (i in 1:length(unique(ac$ac))) {
ac.coords[i,]<- round(c(tmp[i], tmp[i+n.ac]), 0)
}
ac.coords<- data.frame(ac.coords, ac=1:length(unique(ac$ac)))
View(ac.coords)
ggplot() +
geom_sf(data = fl) +
coord_sf(xlim = c(min(dat$utmlong-20000), max(dat$utmlong+20000)),
ylim = c(min(dat$utmlat-20000), max(dat$utmlat+20000)), expand = FALSE) +
geom_point(data = dat, aes(utmlong, utmlat, color=ac), size=0.5, alpha = 0.6) +
geom_point(data = ac.coords, aes(x, y, color = ac), size = 4, pch = 1, stroke = 1) +
scale_color_viridis_c() +
labs(x = "Easting", y = "Northing") +
theme_bw()
write.csv(ac.coords, "Activity Center Coordinates.csv", row.names = F)
View(dat)
write.csv(dat, "Snail Kite Gridded Data_AC.csv", row.names = F)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/cluster_tsegments_loc")
setwd("~/Documents/Snail Kite Project/Data/R Scripts/cluster_tsegments_loc")
# ACs and initial values
ac.coords<- read.csv("Activity Center Coordinates.csv", header = T, sep = ',')
View(ac.coords)
set.seed(1)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(progress)
library(rnaturalearth)
library(rnaturalearthdata)
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
setwd("~/Documents/Snail Kite Project/Data/R Scripts/activity_center1")
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
obs<- get.summary.stats_obs(dat)
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
tmp<- which(apply(obs[,-1], 2, sum) > 100)
ac.coord.init<- grid.coord[tmp,-3]
View(ac.coord.init)
ggplot() +
geom_point(data = ac.coord.init, aes(x, y), size = 3, color = "steelblue", alpha = 0.6) +
geom_point(data = ac.coords, aes(x, y), size = 3, color = "firebrick", alpha = 0.6)
setwd("~/Documents/Snail Kite Project/Data/R Scripts/cluster_tsegments_loc")
# ACs and initial values
ac.coords<- read.csv("Activity Center Coordinates.csv", header = T, sep = ',')
ggplot() +
geom_point(data = ac.coord.init, aes(x, y), size = 3, color = "steelblue", alpha = 0.6) +
geom_point(data = ac.coords, aes(x, y), size = 3, color = "firebrick", alpha = 0.6)
# ACs and initial values
ggplot() +
geom_point(data = ac.coord.init, aes(x, y, color = "Initial Values"), size = 3, alpha = 0.6) +
geom_point(data = ac.coords, aes(x, y, color = "Modeled ACs"), size = 3, alpha = 0.6) +
labs(x="Easting", y="Northing") +
scale_color_manual(values = c("steelblue","firebrick"))
# ACs and initial values
ggplot() +
geom_point(data = ac.coord.init, aes(x, y, color = "Initial Values"), size = 3, alpha = 0.6) +
geom_point(data = ac.coords, aes(x, y, color = "Modeled ACs"), size = 3, alpha = 0.6) +
labs(x="Easting", y="Northing") +
scale_color_manual("", values = c("steelblue","firebrick"))
