plot(res$logl,type='l')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
table(k)
ordem=c(2,3,1)
ac.coord=matrix(res$coord[ngibbs,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
set.seed(1)
n.tsegm=100
n.ac=3
n.grid=30
n=floor(runif(n.tsegm,min=0,max=900))
?floor
n=runif(n.tsegm,min=0,max=900)
n
n=floor(runif(n.tsegm,min=0,max=900))
n
n=runif(n.tsegm,min=0,max=900)
n
floor(n)
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
ac.coord
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
phi.true=phi=0.1
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
image(y[z==3,])
image(y[z==2,])
image(y[z==1,])
View(y)
image(y[x==3,])
rm(list=ls(all=TRUE))
set.seed(100)
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
ngibbs=1000
nburn=ngibbs/2
n.ac=3
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init)
plot(res$logl,type='l')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
phi.true=phi=0.1
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
n.tsegm=100
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
View(k)
table(k)
ordem=c(2,3,1)
ac.coord=matrix(res$coord[ngibbs,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
ac.coord.true=ac.coord=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
ac.coord.true
set.seed(5)
#basic setup
n.tsegm=400
n.ac=6
n.grid=30
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
grid.coord
ac.coord.true=ac.coord=expand.grid(x=c(25,50,75),y=c(30,60))
ac.coord
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#cluster membership
z.true=z=sample(1:n.ac,size=n.tsegm,replace=T)
#distance decay parameter
phi.true=phi=0.1
#generate data
y=matrix(NA,n.tsegm,n.grid)
for (i in 1:n.tsegm){
#calculate distance
x2=(grid.coord$x-ac.coord$x[z[i]])^2
y2=(grid.coord$y-ac.coord$y[z[i]])^2
d=sqrt(x2+y2)
#calculate probability
tmp=exp(-phi*d)
prob=tmp/sum(tmp)
#draw results
y[i,]=rmultinom(1,size=n[i],prob=prob)
}
View(y)
apply(y, 1, sum)
z==5
image(y[z==5,])
image(y[z==1,])
image(y[z==2,])
image(y[z==3,])
image(y[z==4,])
image(y[z==5,])
image(y[z==6,])
set.seed(10)
#read important functions
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
dist1=get.distance(ac.coord=ac.coord,grid.coord=grid.coord,n.grid=n.grid,n.ac=n.ac)
dist2=GetDistance(AcCoord=data.matrix(ac.coord),GridCoord=data.matrix(grid.coord),
Ngrid=n.grid, Nac=n.ac)
View(GetDistance)
get.distance=function(ac.coord,grid.coord,n.grid,n.ac){
res=matrix(NA,n.grid,n.ac)
for (i in 1:n.ac){
x2=(grid.coord$x-ac.coord$x[i])^2
y2=(grid.coord$y-ac.coord$y[i])^2
res[,i]=sqrt(x2+y2)
}
res
}
dist1=get.distance(ac.coord=ac.coord,grid.coord=grid.coord,n.grid=n.grid,n.ac=n.ac)
dist1[1:5,1:5]
dist2[1:5,1:5]
plot(dist1,dist2)
hist(dist1-dist2)
x2=(ac.coord$x[2]-grid.coord$x[1])^2
y2=(ac.coord$y[2]-grid.coord$y[1])^2
sqrt(x2+y2)
x2=(grid.coord$x[2]-ac.coord$x[1])^2
y2=(grid.coord$y[2]-ac.coord$y[1])^2
sqrt(x2+y2)
n.ac*2
table(z)
table(z) %>% sum()
library(dplyr)
table(z) %>% sum()
tmp=table(z)
as.numeric(names(tmp))
as.numeric(names(tmp))
n.ac:1
n=rep(0,n.ac)
n[as.numeric(names(tmp))]=tmp
seq1=n.ac:1
tmp=cumsum(n[seq1])
n.ge=tmp[seq1]
n.ge1=n.ge[-1]
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
plot(res$logl,type='l')
plot(res$phi,type='l')
abline(h=phi.true,col='red')
k=data.frame(estim=res$z[ngibbs,],true1=z.true)
table(k)
ordem=c(6,2,4,3,5,1)
table(k)[ordem,]
n.ac=10
ac.coord=matrix(res$coord[ngibbs,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(unlist(ac.coord.true),ac.coord[ordem,],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord[1:6,1],ac.coord[1:6,2])
rm(list=ls(all=TRUE))
set.seed(1)
library(dplyr)
library(lubridate)
library(ggplot2)
library(coda)
library(raster)
set.seed(10)
#read important functions
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
plot(res$logl,type='l')
plot(res$phi,type='l')
k=data.frame(estim=res$z[ngibbs,])
table(k)
ac.coord=matrix(res$coord[ngibbs,],n.ac,2)
ac.coord
ordem=c(6,2,4,3,5,1)
table(k)[ordem,]
ac.coord.true=ac.coord=expand.grid(x=c(25,50,75),y=c(30,60))
ac.coord=matrix(res$coord[ngibbs,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(unlist(ac.coord.true),ac.coord[ordem,],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord[1:6,1],ac.coord[1:6,2])
rm(list=ls(all=TRUE))
set.seed(10)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
options(warn = -1)
set.seed(10)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
#load data
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
#dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
#dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.seg<- read.csv("ID1 Seg x Loc.csv", header = T, sep = ',')
grid.coord<- grid.summary.table(dat = dat, crs = CRS('+init=epsg:32617'))
View(grid.coord)
source('helper functions.R')
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer)
View(grid.coord)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
library(dplyr)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
View(dat)
#Define initial activity centers (obs > 100)
tmp<- which(apply(obs[,-1], 2, sum) > 100)
ac.coord.init<- grid.coord[tmp,-3]
View(ac.coord.init)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=nrow(ac.coord.init)
gamma1=0.1
res=gibbs.activity.center(dat=obs1.seg,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=obs1.seg,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
set.seed(10)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
#dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.seg<- read.csv("ID1 Seg x Loc.csv", header = T, sep = ',')
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
#Define initial activity centers (obs > 100)
tmp<- which(apply(obs[,-1], 2, sum) > 100)
ac.coord.init<- grid.coord[tmp,-3]
ngibbs=1000
nburn=ngibbs/2
n.ac=nrow(ac.coord.init)
gamma1=0.1
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=obs1.seg,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
set.seed(10)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
#load data
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
#dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.seg<- read.csv("ID1 Seg x Loc.csv", header = T, sep = ',')
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
tmp<- which(apply(obs[,-1], 2, sum) > 100)
ac.coord.init<- grid.coord[tmp,-3]
ngibbs=1000
nburn=ngibbs/2
n.ac=nrow(ac.coord.init)
gamma1=0.1
#run gibbs sampler
options(warn=2)
View(obs1.seg)
View(grid.coord)
res=gibbs.activity.center(dat=obs1.seg, grid.coord=grid.coord[,-3], n.ac=n.ac,
ac.coord.init=ac.coord.init, gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(5)
#basic setup
n.tsegm=400
n.ac=6
n.grid=30
n=floor(runif(n.tsegm,min=0,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ac.coord.true=ac.coord=expand.grid(x=c(25,50,75),y=c(30,60))
grid.coord
class(grid.coord)
rm(list=ls(all=TRUE))
set.seed(10)
#read important functions
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T)
grid.coord=read.csv('fake data grid.csv',as.is=T)
View(dat)
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=10
gamma1=0.1
#initial coordinates (define this based on data instead of uninformative as below)
ac.coord.init=data.frame(x=runif(n.ac,min=0,max=100),
y=runif(n.ac,min=0,max=100))
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1)
set.seed(10)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
source('helper functions.R')
#load data
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
#dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.seg<- read.csv("ID1 Seg x Loc.csv", header = T, sep = ',')
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
#Define initial activity centers (obs > 100)
tmp<- which(apply(obs[,-1], 2, sum) > 100)
ac.coord.init<- grid.coord[tmp,-3]
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=nrow(ac.coord.init)
gamma1=0.1
View(utm.crs)
View(extent)
#run gibbs sampler
options(warn=2)
grid.coord[,-3]
res=gibbs.activity.center(dat=obs1.seg, grid.coord=grid.coord[,-3], n.ac=n.ac,
ac.coord.init=ac.coord.init, gamma1=gamma1)
View(grid.coord)
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer) %>%
dplyr::select(-grid.cell)
View(grid.coord)
set.seed(1)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
#dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.seg<- read.csv("ID1 Seg x Loc.csv", header = T, sep = ',')
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer) %>%
dplyr::select(-grid.cell)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
set.seed(1)
#load libraries and read important functions
library('Rcpp')
library(raster)
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
source('helper functions.R')
#load data
dat<- read.csv("Snail Kite Gridded Data.csv", header = T, sep = ",")
#dat.list<- list(`1`=dat1, `12`=dat12, `19`=dat19, `27`=dat27)
obs<- read.csv("Occupancy Matrix for all Obs and Locs.csv", header = T, sep = ",")
obs1.seg<- read.csv("ID1 Seg x Loc.csv", header = T, sep = ',')
# obs12.seg<- read.csv("ID12 Seg x Loc.csv", header = T, sep = ',')
# obs19.seg<- read.csv("ID19 Seg x Loc.csv", header = T, sep = ',')
# obs27.seg<- read.csv("ID27 Seg x Loc.csv", header = T, sep = ',')
utm.crs<- CRS('+init=epsg:32617')
extent<- extent(min(dat$utmlong), max(dat$utmlong), min(dat$utmlat), max(dat$utmlat))
res<- 5000
buffer<- 10000
grid.coord<- grid.summary.table(dat=dat, crs=utm.crs, extent=extent, res=res, buffer=buffer)
dat<- left_join(dat, grid.coord, by="grid.cell") #add gridded locs to DF
View(dat)
tmp<- which(apply(obs[,-1], 2, sum) > 100)
ac.coord.init<- grid.coord[tmp,-3]
#########################
### Run Gibbs sampler ###
#########################
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=nrow(ac.coord.init)
gamma1=0.1
#run gibbs sampler
options(warn=2)
res=gibbs.activity.center(dat=obs1.seg, grid.coord=grid.coord[,-3], n.ac=n.ac,
ac.coord.init=ac.coord.init, gamma1=gamma1)
